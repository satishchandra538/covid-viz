!function(t){var n={};function g(I){if(n[I])return n[I].exports;var c=n[I]={i:I,l:!1,exports:{}};return t[I].call(c.exports,c,c.exports,g),c.l=!0,c.exports}g.m=t,g.c=n,g.d=function(t,n,I){g.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:I})},g.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},g.t=function(t,n){if(1&n&&(t=g(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var I=Object.create(null);if(g.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var c in t)g.d(I,c,function(n){return t[n]}.bind(null,c));return I},g.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return g.d(n,"a",n),n},g.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},g.p="",g(g.s=0)}([function(module,exports,__webpack_require__){eval('var donutChart = __webpack_require__(1);\r\nmultiLineGraph = __webpack_require__(2);\r\n//window.multiLineGraph = multiLineGraph;\r\n\r\nconst countrySelection = document.getElementById("countrySelection");\r\nconst totalConfirmedInDoc = document.getElementById("totalConfirmed");\r\nconst totalDeathsInDoc = document.getElementById("totalDeaths");\r\nconst totalRecoveredInDoc = document.getElementById("totalRecovered");\r\nconst totalDeathRateInDoc = document.getElementById("deathRate");\r\nconst totalRecoveryRateInDoc = document.getElementById("recoveryRate");\r\nconst worldTable = document.getElementById("worldTable");\r\n\r\ncountries = {};\r\nwindow.days = 0;\r\n//Tool tip div element\r\ndiv = d3\r\n    .select(\'body\')\r\n    .append(\'div\')\r\n    .attr(\'class\', \'tooltip\')\r\n\r\nconst fetchData = async () => {\r\n    const data = await fetch(\'https://pomber.github.io/covid19/timeseries.json\');\r\n    const jsonData = await data.json();\r\n\r\n    countries = Object.keys(jsonData).map((country) => {\r\n        return [country, jsonData[country]]\r\n    })\r\n    //parsing date\r\n    var parseDate = d3.timeParse("%Y-%m-%d");\r\n    countries.forEach(country => {\r\n        country[1].forEach(day => {\r\n            day.date = parseDate(day.date)\r\n        })\r\n    })\r\n\r\n    days = countries[0][1].length;\r\n\r\n    //add countrySelection\r\n    let totalConfirmed = 0;\r\n    let totalDeath = 0;\r\n    let totalRecovered = 0;\r\n    let totalConfirmedChange = 0;\r\n    let totalDeathChange = 0;\r\n    let totalRecoveredChange = 0;\r\n    let countryWithHighestDeathRate = 0;\r\n\r\n    countries.forEach(country => {\r\n        const days = country[1].length;\r\n        totalConfirmed += country[1][days - 1].confirmed;\r\n        totalConfirmedChange += country[1][days - 2].confirmed\r\n        totalRecovered += country[1][days - 1].recovered;\r\n        totalRecoveredChange += country[1][days - 2].recovered;\r\n        totalDeath += country[1][days - 1].deaths;\r\n        totalDeathChange += country[1][days - 2].deaths;\r\n        countryWithHighestDeathRate = countryWithHighestDeathRate > (country[1][days - 2].deaths / country[1][days - 2].confirmed) * 100 ? countryWithHighestDeathRate : (country[1][days - 2].deaths / country[1][days - 2].confirmed) * 100;\r\n    })\r\n\r\n    let totalActive = totalConfirmed - totalDeath - totalRecovered;\r\n    totalConfirmedInDoc.innerHTML = totalConfirmed + `<span class="change"> (${totalConfirmed - totalConfirmedChange}+)</span>`;\r\n    totalDeathsInDoc.innerHTML = totalDeath + `<span class="change"> (${totalDeath - totalDeathChange}+)</span>`;\r\n    totalRecoveredInDoc.innerHTML = totalRecovered + `<span class="change"> (${totalRecovered - totalRecoveredChange}+)</span>`;\r\n    let totalDeathRate = Math.floor((totalDeath * 100 / totalConfirmed) * 100) / 100;\r\n    totalDeathRateInDoc.innerHTML = totalDeathRate + "%";\r\n    let totalRecoveryRate = Math.floor((totalRecovered * 100 / totalConfirmed) * 100) / 100;\r\n    totalRecoveryRateInDoc.innerHTML = totalRecoveryRate + "%";\r\n\r\n    //--------Adding Donut char for whole wold data---------\r\n    donutChart(totalActive, totalDeath, totalRecovered);\r\n\r\n    //--------Adding Multiline Graph------------------------\r\n    multiLineGraph(countries, days, numberOfCountriesInLineChart);\r\n\r\n    //--------Table making----------------------------------\r\n    countries.forEach((country, index) => {\r\n        let TR = document.createElement("tr");\r\n        let TDcountry = document.createElement("td");\r\n        let TDcases = document.createElement("td");\r\n        let TDdeath = document.createElement("td");\r\n        let TDdeathrate = document.createElement("td");\r\n        let countryDeathRate = ((country[1][days - 1].deaths * 100) / country[1][days - 1].confirmed).toFixed(1);\r\n        if (countryDeathRate < 10) {\r\n            countryDeathRate = ". " + countryDeathRate;\r\n        }\r\n        let barWidth = (((country[1][days - 1].deaths / country[1][days - 1].confirmed) * 100) / countryWithHighestDeathRate) * 150;\r\n        let deathRateBar = `<svg width="100" height="20">\r\n            <rect width=${barWidth} height="20" fill="brown"></rect>\r\n        </svg>`\r\n        TDcountry.innerHTML = `${country[0]}`;\r\n        TDcases.innerHTML = country[1][days - 1].confirmed;\r\n        TDdeath.innerHTML = country[1][days - 1].deaths;\r\n        TDdeathrate.innerHTML = countryDeathRate + "% " + deathRateBar;\r\n        TR.append(TDcountry, TDcases, TDdeath, TDdeathrate)\r\n        worldTable.appendChild(TR);\r\n    })\r\n\r\n}\r\nfetchData()\r\n\r\n///////////filter in table\r\nwindow.searchCountry = () => {\r\n    var input, filter, table, tr, td, i, txtValue;\r\n    input = document.getElementById("tableSearchInput");\r\n    filter = input.value.toUpperCase();\r\n    table = worldTable.parentNode;\r\n    tr = table.getElementsByTagName("tr");\r\n    for (i = 0; i < tr.length; i++) {\r\n        td = tr[i].getElementsByTagName("td")[0];\r\n        if (td) {\r\n            txtValue = td.textContent || td.innerText;\r\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                tr[i].style.display = "";\r\n            } else {\r\n                tr[i].style.display = "none";\r\n            }\r\n        }\r\n    }\r\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval("const donutChart = (totalActive, totalDeath, totalRecovered) => {\r\n    var pieCharParent = document.getElementById('worldActivePieChart').parentElement;\r\n    var pieChartWidth = pieCharParent.offsetWidth * 0.6;\r\n    var radius = pieChartWidth / 2;\r\n    const donutData = [{ label: 'totalRecovered', value: totalRecovered },\r\n    { label: 'totalActive', value: totalActive },\r\n    { label: 'totalDeath', value: totalDeath }];\r\n\r\n    var svg = d3.select(\"#worldActivePieChart\")\r\n        .attr(\"width\", pieCharParent.offsetWidth)\r\n        .attr(\"height\", pieCharParent.offsetWidth / 1.2)\r\n        .append('g')\r\n        .attr('transform', `translate(${pieChartWidth / 1.2},${pieChartWidth / 1.2})`)\r\n\r\n    var color = d3.scaleOrdinal()\r\n        .domain(donutData.map(d => d.label))\r\n        .range(d3.schemeDark2);\r\n\r\n    var pie = d3.pie()\r\n        .value(function (d) { return d.value.value; })\r\n    var data_ready = pie(d3.entries(donutData))\r\n\r\n    var arc = d3.arc()\r\n        .innerRadius(radius * 0.5)\r\n        .outerRadius(radius * 0.8)\r\n\r\n    // Another arc that won't be drawn. Just for labels positioning\r\n    var outerArc = d3.arc()\r\n        .innerRadius(radius * 0.9)\r\n        .outerRadius(radius * 0.9)\r\n\r\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\r\n    svg\r\n        .selectAll('allSlices')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', arc)\r\n        .attr('fill', function (d) { return (color(d.data.key)) })\r\n        .attr(\"stroke\", \"white\")\r\n        .style(\"stroke-width\", \"2px\")\r\n        .style(\"opacity\", 0.7)\r\n\r\n    // Add the polylines between chart and labels:\r\n    svg\r\n        .selectAll('allPolylines')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('polyline')\r\n        .attr(\"stroke\", \"black\")\r\n        .style(\"fill\", \"none\")\r\n        .attr(\"stroke-width\", 1)\r\n        .attr('points', function (d) {\r\n            var posA = arc.centroid(d) // line insertion in the slice\r\n            var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\r\n            var posC = outerArc.centroid(d); // Label position = almost the same as posB\r\n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\r\n            posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\r\n            return [posA, posB, posC]\r\n        })\r\n\r\n    // Add the polylines between chart and labels:\r\n    svg\r\n        .selectAll('allLabels')\r\n        .data(data_ready)\r\n        .enter()\r\n        .append('text')\r\n        .text(function (d) { return d.data.value.label })\r\n        .attr('transform', function (d) {\r\n            var pos = outerArc.centroid(d);\r\n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\r\n            pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\r\n            return 'translate(' + pos + ')';\r\n        })\r\n        .style('text-anchor', function (d) {\r\n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\r\n            return (midangle < Math.PI ? 'start' : 'end')\r\n        })\r\n}\r\nwindow.donutChart = donutChart;\r\nmodule.exports = donutChart;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb251dENoYXJ0LmpzPzA1NmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaURBQWlEO0FBQ3pFLEtBQUssMkNBQTJDO0FBQ2hELEtBQUsseUNBQXlDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvQkFBb0IsR0FBRyxvQkFBb0I7O0FBRW5GO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixzQkFBc0IsRUFBRTtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNkJBQTZCO0FBQ2pFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0QkFBNEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkb251dENoYXJ0ID0gKHRvdGFsQWN0aXZlLCB0b3RhbERlYXRoLCB0b3RhbFJlY292ZXJlZCkgPT4ge1xyXG4gICAgdmFyIHBpZUNoYXJQYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd29ybGRBY3RpdmVQaWVDaGFydCcpLnBhcmVudEVsZW1lbnQ7XHJcbiAgICB2YXIgcGllQ2hhcnRXaWR0aCA9IHBpZUNoYXJQYXJlbnQub2Zmc2V0V2lkdGggKiAwLjY7XHJcbiAgICB2YXIgcmFkaXVzID0gcGllQ2hhcnRXaWR0aCAvIDI7XHJcbiAgICBjb25zdCBkb251dERhdGEgPSBbeyBsYWJlbDogJ3RvdGFsUmVjb3ZlcmVkJywgdmFsdWU6IHRvdGFsUmVjb3ZlcmVkIH0sXHJcbiAgICB7IGxhYmVsOiAndG90YWxBY3RpdmUnLCB2YWx1ZTogdG90YWxBY3RpdmUgfSxcclxuICAgIHsgbGFiZWw6ICd0b3RhbERlYXRoJywgdmFsdWU6IHRvdGFsRGVhdGggfV07XHJcblxyXG4gICAgdmFyIHN2ZyA9IGQzLnNlbGVjdChcIiN3b3JsZEFjdGl2ZVBpZUNoYXJ0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBwaWVDaGFyUGFyZW50Lm9mZnNldFdpZHRoKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHBpZUNoYXJQYXJlbnQub2Zmc2V0V2lkdGggLyAxLjIpXHJcbiAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtwaWVDaGFydFdpZHRoIC8gMS4yfSwke3BpZUNoYXJ0V2lkdGggLyAxLjJ9KWApXHJcblxyXG4gICAgdmFyIGNvbG9yID0gZDMuc2NhbGVPcmRpbmFsKClcclxuICAgICAgICAuZG9tYWluKGRvbnV0RGF0YS5tYXAoZCA9PiBkLmxhYmVsKSlcclxuICAgICAgICAucmFuZ2UoZDMuc2NoZW1lRGFyazIpO1xyXG5cclxuICAgIHZhciBwaWUgPSBkMy5waWUoKVxyXG4gICAgICAgIC52YWx1ZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC52YWx1ZS52YWx1ZTsgfSlcclxuICAgIHZhciBkYXRhX3JlYWR5ID0gcGllKGQzLmVudHJpZXMoZG9udXREYXRhKSlcclxuXHJcbiAgICB2YXIgYXJjID0gZDMuYXJjKClcclxuICAgICAgICAuaW5uZXJSYWRpdXMocmFkaXVzICogMC41KVxyXG4gICAgICAgIC5vdXRlclJhZGl1cyhyYWRpdXMgKiAwLjgpXHJcblxyXG4gICAgLy8gQW5vdGhlciBhcmMgdGhhdCB3b24ndCBiZSBkcmF3bi4gSnVzdCBmb3IgbGFiZWxzIHBvc2l0aW9uaW5nXHJcbiAgICB2YXIgb3V0ZXJBcmMgPSBkMy5hcmMoKVxyXG4gICAgICAgIC5pbm5lclJhZGl1cyhyYWRpdXMgKiAwLjkpXHJcbiAgICAgICAgLm91dGVyUmFkaXVzKHJhZGl1cyAqIDAuOSlcclxuXHJcbiAgICAvLyBCdWlsZCB0aGUgcGllIGNoYXJ0OiBCYXNpY2FsbHksIGVhY2ggcGFydCBvZiB0aGUgcGllIGlzIGEgcGF0aCB0aGF0IHdlIGJ1aWxkIHVzaW5nIHRoZSBhcmMgZnVuY3Rpb24uXHJcbiAgICBzdmdcclxuICAgICAgICAuc2VsZWN0QWxsKCdhbGxTbGljZXMnKVxyXG4gICAgICAgIC5kYXRhKGRhdGFfcmVhZHkpXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAuYXR0cignZCcsIGFyYylcclxuICAgICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiAoY29sb3IoZC5kYXRhLmtleSkpIH0pXHJcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKVxyXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjJweFwiKVxyXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC43KVxyXG5cclxuICAgIC8vIEFkZCB0aGUgcG9seWxpbmVzIGJldHdlZW4gY2hhcnQgYW5kIGxhYmVsczpcclxuICAgIHN2Z1xyXG4gICAgICAgIC5zZWxlY3RBbGwoJ2FsbFBvbHlsaW5lcycpXHJcbiAgICAgICAgLmRhdGEoZGF0YV9yZWFkeSlcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3BvbHlsaW5lJylcclxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpXHJcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKVxyXG4gICAgICAgIC5hdHRyKCdwb2ludHMnLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICB2YXIgcG9zQSA9IGFyYy5jZW50cm9pZChkKSAvLyBsaW5lIGluc2VydGlvbiBpbiB0aGUgc2xpY2VcclxuICAgICAgICAgICAgdmFyIHBvc0IgPSBvdXRlckFyYy5jZW50cm9pZChkKSAvLyBsaW5lIGJyZWFrOiB3ZSB1c2UgdGhlIG90aGVyIGFyYyBnZW5lcmF0b3IgdGhhdCBoYXMgYmVlbiBidWlsdCBvbmx5IGZvciB0aGF0XHJcbiAgICAgICAgICAgIHZhciBwb3NDID0gb3V0ZXJBcmMuY2VudHJvaWQoZCk7IC8vIExhYmVsIHBvc2l0aW9uID0gYWxtb3N0IHRoZSBzYW1lIGFzIHBvc0JcclxuICAgICAgICAgICAgdmFyIG1pZGFuZ2xlID0gZC5zdGFydEFuZ2xlICsgKGQuZW5kQW5nbGUgLSBkLnN0YXJ0QW5nbGUpIC8gMiAvLyB3ZSBuZWVkIHRoZSBhbmdsZSB0byBzZWUgaWYgdGhlIFggcG9zaXRpb24gd2lsbCBiZSBhdCB0aGUgZXh0cmVtZSByaWdodCBvciBleHRyZW1lIGxlZnRcclxuICAgICAgICAgICAgcG9zQ1swXSA9IHJhZGl1cyAqIDAuOTUgKiAobWlkYW5nbGUgPCBNYXRoLlBJID8gMSA6IC0xKTsgLy8gbXVsdGlwbHkgYnkgMSBvciAtMSB0byBwdXQgaXQgb24gdGhlIHJpZ2h0IG9yIG9uIHRoZSBsZWZ0XHJcbiAgICAgICAgICAgIHJldHVybiBbcG9zQSwgcG9zQiwgcG9zQ11cclxuICAgICAgICB9KVxyXG5cclxuICAgIC8vIEFkZCB0aGUgcG9seWxpbmVzIGJldHdlZW4gY2hhcnQgYW5kIGxhYmVsczpcclxuICAgIHN2Z1xyXG4gICAgICAgIC5zZWxlY3RBbGwoJ2FsbExhYmVscycpXHJcbiAgICAgICAgLmRhdGEoZGF0YV9yZWFkeSlcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRhdGEudmFsdWUubGFiZWwgfSlcclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgdmFyIHBvcyA9IG91dGVyQXJjLmNlbnRyb2lkKGQpO1xyXG4gICAgICAgICAgICB2YXIgbWlkYW5nbGUgPSBkLnN0YXJ0QW5nbGUgKyAoZC5lbmRBbmdsZSAtIGQuc3RhcnRBbmdsZSkgLyAyXHJcbiAgICAgICAgICAgIHBvc1swXSA9IHJhZGl1cyAqIDAuOTkgKiAobWlkYW5nbGUgPCBNYXRoLlBJID8gMSA6IC0xKTtcclxuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHBvcyArICcpJztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICB2YXIgbWlkYW5nbGUgPSBkLnN0YXJ0QW5nbGUgKyAoZC5lbmRBbmdsZSAtIGQuc3RhcnRBbmdsZSkgLyAyXHJcbiAgICAgICAgICAgIHJldHVybiAobWlkYW5nbGUgPCBNYXRoLlBJID8gJ3N0YXJ0JyA6ICdlbmQnKVxyXG4gICAgICAgIH0pXHJcbn1cclxud2luZG93LmRvbnV0Q2hhcnQgPSBkb251dENoYXJ0O1xyXG5tb2R1bGUuZXhwb3J0cyA9IGRvbnV0Q2hhcnQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval("const multiLineGraph = (countries, days, numberOfCountriesInLineChart) => {\r\n    var LineGraphParent = document.getElementById('worldMultilineChart').parentElement;\r\n    const margin = { left: 60, top: 30, right: 45, bottom: 20 };\r\n    countries.forEach(country => {\r\n        const option = document.createElement(\"option\");\r\n        option.value = country[0];\r\n        option.innerHTML = country[0];\r\n        countrySelection.appendChild(option);\r\n    })\r\n    const svg = d3.select('#worldMultilineChart')\r\n        .attr('width', LineGraphParent.offsetWidth)\r\n        .attr('height', LineGraphParent.offsetWidth * .4 + 20)\r\n\r\n    const g = svg.append('g')\r\n        .attr('transform', `translate(${margin.left},${margin.top})`)\r\n\r\n    //sorting country according to confirmed cases\r\n    const sortBy = document.getElementById(\"sortBy\");\r\n\r\n    const fromDayInRange = document.getElementById('fromDayInRange');\r\n    fromDayInRange.max = days;\r\n    document.getElementById('fromDay').innerHTML = fromDayInRange.value;\r\n    document.getElementById('toDay').innerHTML = days;\r\n\r\n    var fromDay = fromDayInRange.value;\r\n    countries.sort((a, b) => {\r\n        return b[1][fromDay][sortBy.value] - a[1][fromDay][sortBy.value];\r\n    })\r\n\r\n    //Graph from day X to till date\r\n    const newData = [];\r\n    countries.forEach(country => {\r\n        let name = country[0];\r\n        let data = [];\r\n        for (let i = fromDay; i < days; i++) {\r\n            data.push(country[1][i]);\r\n        }\r\n        let set = [];\r\n        set.push(name);\r\n        set.push(data);\r\n        newData.push(set);\r\n    })\r\n\r\n    var topX = [];\r\n    var numberOfCountriesInLineChart = 5;//document.getElementById('numberOfCountriesInLineChart').value;\r\n    for (let i = 0; i < numberOfCountriesInLineChart; i++) {\r\n        topX.push(newData[i]);\r\n    }\r\n\r\n    $(\"#countrySelection\").select2({\r\n        placeholder: \"Select countries\",\r\n        allowClear: true\r\n    });\r\n    const select2List = document.getElementById(\"select2-countrySelection-container\");\r\n    if (select2List.childElementCount) {\r\n        topX = [];\r\n        //select2List.children.style.color = 'black';\r\n        const select2Values = select2List.innerText.split(\"×\");\r\n        select2Values.shift();\r\n        for(let i=0;i<select2Values.length;i++){\r\n            newData.forEach(country=>{\r\n                if(country[0]===select2Values[i]){\r\n                    topX.push(country);\r\n                }\r\n            })\r\n        }\r\n        // document.getElementById(\"controlDisplay\").style.display = \"none\";\r\n    }\r\n    else {\r\n        document.getElementById(\"controlDisplay\").style.display = \"inline\";\r\n    }\r\n    var maxYValue = 0;\r\n    topX.forEach(country => {\r\n        country[1].forEach(day => {\r\n            maxYValue = maxYValue < day[sortBy.value] ? day[sortBy.value] : maxYValue;\r\n        })\r\n    })\r\n\r\n    const yScale = d3.scaleLinear()\r\n        .domain([maxYValue, 0])\r\n        .range([0, LineGraphParent.offsetWidth * .4 - 30])\r\n        .nice()\r\n    const yAxis = d3.axisLeft(yScale)\r\n        .tickSize(-LineGraphParent.offsetWidth + 80);\r\n    svg.selectAll('.yaxis').remove();\r\n    g.append('g')\r\n        .call(yAxis)\r\n        .attr('class', 'yaxis')\r\n        .attr('transform', `translate(${0},${-margin.bottom})`)\r\n    const lineColor = d3.scaleOrdinal().range(d3.schemeCategory10);\r\n    const line = d3.line()\r\n        .curve(d3.curveMonotoneX)\r\n        .x(d => xScale(d.date))\r\n        .y(d => yScale(d[sortBy.value]));\r\n\r\n    const xScale = d3.scaleTime()\r\n        .domain(d3.extent(newData[0][1], d => d.date))\r\n        .range([0, LineGraphParent.offsetWidth - 80])\r\n\r\n    const xTicks = 10;\r\n    const xAxis = d3.axisBottom(xScale)\r\n        .ticks(xTicks)\r\n        .tickSize(-LineGraphParent.offsetHeight + 102);\r\n    svg.selectAll('.xaxis').remove();\r\n    g.append('g')\r\n        .call(xAxis)\r\n        .attr('class', 'xaxis')\r\n        .attr('transform', `translate(${0},${LineGraphParent.offsetWidth * .4 - margin.bottom - 30})`);\r\n\r\n    svg.selectAll(\".country\").remove();\r\n    var country = g.selectAll(\".country\")\r\n        .data(topX)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", d => `country ${d[0]}`)\r\n        .attr('transform', `translate(${-margin.left + 61},${-margin.bottom})`);\r\n\r\n    country.append('path')\r\n        .attr('fill', 'none')\r\n        .style(\"stroke\", d => lineColor(d[0]))\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"d\", d => line(d[1]))\r\n\r\n    country.append('text')\r\n        .style(\"fill\", d => lineColor(d[0]))\r\n        .text(d => d[0])\r\n        .style(\"font-weight\", 600)\r\n        .attr('x', d => xScale(d[1][days - 1 - fromDay].date) - 80)\r\n        .attr('y', d => yScale(d[1][days - 1 - fromDay][sortBy.value]) - 2)\r\n        .attr('class', 'line-graph-country-legend')\r\n\r\n    svg.selectAll('.legend-circle').remove();\r\n    country.selectAll('.legend-circles-path')\r\n        .data(topX)\r\n        .enter()\r\n        .append('g')\r\n        .attr('class', 'legend-circle')\r\n        .attr('fill', d => lineColor(d[0]))\r\n        .selectAll('circle')\r\n        .data(d => d[1])\r\n        .enter()\r\n        .append('circle')\r\n        .attr(\"r\", 1.5)\r\n        .attr(\"cx\", d => xScale(d.date))\r\n        .attr(\"cy\", d => yScale(d[sortBy.value]))\r\n        .on('mouseover', function (d) {\r\n            div.style(\"display\", \"block\")\r\n            div.transition()\r\n                .duration(200)\r\n                .style(\"opacity\", 0.8);\r\n            div.html(\r\n                `<span style=\"font-size:16px\"><b>Confirmed</b>: ${d.confirmed}</span>\r\n                <br/>\r\n                <span style=\"color:black\"><b>Deaths</b>: ${d.deaths}</span>\r\n                <br/>\r\n                <span style=\"color:black\"><b>Date</b>: ${(d.date).toString().substring(0, 16)}</span>`\r\n            )\r\n                .style('left', d3.event.pageX + 10 + 'px')\r\n                .style('top', d3.event.pageY - 28 + 'px');\r\n            this.attributes[0].value = 3;\r\n            // console.log(this)\r\n        })\r\n        .on(\"mouseout\", function (d) { div.style(\"display\", \"none\"); this.attributes[0].value = 1.5; })\r\n\r\n}\r\nwindow.multiLineGraph = multiLineGraph;\r\nmodule.exports = multiLineGraph;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);